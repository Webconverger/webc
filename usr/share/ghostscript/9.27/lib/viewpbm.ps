% Copyright (C) 2001-2019 Artifex Software, Inc.
% All Rights Reserved.
%
% This software is provided AS-IS with no warranty, either express or
% implied.
%
% This software is distributed under license and may not be copied,
% modified or distributed except as expressly authorized under the terms
% of the license contained in the file LICENSE in this distribution.
%
% Refer to licensing information at http://www.artifex.com or contact
% Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
% CA 94945, U.S.A., +1(415)492-9861, for further information.
%

% viewpbm.ps
% Display a PBM/PGM/PPM file.
% Requires the Level 2 `image' operator (to handle variable pixel widths).
% If SCALE is defined, maps input pixels to output pixels with that scale;
% if SCALE is undefined, scales the image to fit the page.
% If FITPAGE true, it fits the output page size to the image, honouring SCALE
% When the input is PAM (P7) RGBTAG from bitrgbtags device, -dTAG will show
% the tags is pseudo color:
% TEXT=1, IMAGE=2, PATH=4, UNTOUCHED=8
%  red     green   blue      gray

/s 100 string def
/readmaxv {		% <file> readmaxv -
  10 string readline pop cvx exec /maxv exch def
} bind def
/readrow {		% <file> <row> readrow <row>
  0 1 2 index length 1 sub {
    1 index exch 3 index token pop put
  } for exch pop
} bind def
/read01 {		% <file> <count> read01 <byte>
  0 exch {
    1 index read pop 48 xor dup 1 le { exch dup add add } { pop } ifelse
  } repeat
} bind def
/readrow01 {		% <file> <row> readrow01 <row>
  0 1 w 8 idiv {
    1 index exch 3 index 8 read01 put
  } for
  wrem 0 ne {
     dup rsize 1 sub wrem read01 8 wrem sub bitshift put
  } if
  exch pop
} bind def
/readwh {		% <file> readwh <w> <h>
 dup s readline pop		% check for comment
 (#) anchorsearch {
   pop pop dup s readline pop
 } if
 cvx exec
} bind def
/pbmtypes mark
% The procedures in this dictionary are called as
%	<file> Pn <w> <h> <readproc>
/P1 {			% ASCII 1-bit white/black
  /bpc 1 def /maxv 1 def /rsize w 7 add 8 idiv def
  /wrem w 8 mod def
  /ncomp 1 def /invert true def /DeviceGray setcolorspace
  readwh
        { readrow01 }
} bind
/P2 {			% ASCII 8-bit gray
  readwh
  /bpc 8 def 2 index readmaxv /rsize 2 index def
  /ncomp 1 def /invert false def /DeviceGray setcolorspace
        { readrow }
} bind
/P3 {			% ASCII 8-bit RGB
  readwh
  /bpc 8 def 2 index readmaxv /rsize 2 index 3 mul def
  /ncomp 3 def /invert false def /DeviceRGB setcolorspace
        { readrow }
} bind
/P4 {			% Binary 1-bit white/black
  readwh
  /bpc 1 def /maxv 1 def /rsize 2 index 7 add 8 idiv def
  /ncomp 1 def /invert true def /DeviceGray setcolorspace
        { readstring pop }
} bind
/P5 {			% Binary 8-bit gray
  readwh
  /bpc 8 def 2 index readmaxv /rsize 2 index def
  /ncomp 1 def /invert false def /DeviceGray setcolorspace
        { readstring pop }
} bind
/P6 {			% Binary 8-bit RGB
  readwh
  /bpc 8 def 2 index readmaxv /rsize 2 index 3 mul def
  /ncomp 3 def /invert false def /DeviceRGB setcolorspace
        { readstring pop }
} bind
/P7 {			% Assume Binary 8-bit CMYK -- assumes 'pf' is the input file
% P7
% WIDTH 612	%% used to set rsize and w
% HEIGHT 792	%% used to set h
% DEPTH 4	%% if present and not 1 or 4, then bail
% MAXVAL 255	%% used to set maxv
% TUPLTYPE CMYK | RGB_TAG | RGB_ALPHA | GRAYSCALE %% if present and not one of these, then bail
% ENDHDR	%% skip everything else up to this
  /P7KEYS <<
    /WIDTH { /w pf token pop def }
    /HEIGHT { /h pf token pop def }
    /DEPTH { /d pf token pop def d 4 eq d 1 eq or not {
             (*** Only DEPTH 1 or 4 PAM files supported at this time. ***) = quit
             } if
           }
    /MAXVAL { /maxv pf token pop def }
    /TUPLTYPE { pf token pop dup /CMYK eq 1 index /RGB_TAG eq or 1 index /RGB_ALPHA eq or 1 index /GRAYSCALE eq or not {
                  (*** Only CMYK, RGB_TAG, RGB_ALPHA and GRAYSCALE files supported at this time. ***) = quit
                } if
                /T exch def
              }
    /ENDHDR { exit }
    (#) cvn { pf 255 string readline pop pop }
  >> def
  { pf token not { exit } if P7KEYS exch .knownget { exec } if } loop
  /bpc 8 def
  /rsize w 4 mul def		% same bytes per line for CMYK or RGB_TAG
  /T load /CMYK eq {
    /ncomp 4 def /invert false def /DeviceCMYK setcolorspace
    w h { readstring pop }
  } if
  /T load /RGB_ALPHA eq {
    /ncomp 4 def /invert false def /DeviceCMYK setcolorspace
    w h { readstring pop }
  } if
  /T load /GRAYSCALE eq {
    /ncomp 1 def /invert false def /DeviceGray setcolorspace
    w h { readstring pop }
  } if
  /T load /RGB_TAG eq {
    % not CMYK, must be RGB_TAG since was checked above
    /TAG where {
      pop
      % show the tags as pseudo-color image
      /ncomp 1 def /invert false def /maxv 1 def
      [ /Indexed /DeviceRGB 255
        % UNTOUCHED=0, TEXT=1, IMAGE=2, PATH=4
        %     gray      red     green    blue
        768 string
        dup 0 <cccccc ff0000 00ff00 ffff00 0000ff ff00ff 00ffff ffffff 000000> putinterval
      ] setcolorspace
      w h {
        readstring pop
        % discard all but the tag
        dup length 4 div cvi
        string	% destination string
        0 1 2 index length 1 sub {
          2 index 1 index 4 mul get
          2 index exch 2 index exch
          put
          pop % done with pixel#
        } for
        exch pop
      }
    } {
      % show the image as RGB (ignore tags)
      /ncomp 3 def /invert false def /DeviceRGB setcolorspace
      w h {
        readstring pop
        % re-pack the RGB, discard the tag
        dup length 4 div 3 mul cvi string	% destination string
        0 1 2 index length 3 idiv 1 sub {
          % stack: RGBTstring destRGBstring pixel#
          2 index 1 index 4 mul 4 getinterval
          1 3 getinterval	% RGB values
          % stack RGBTstring destRGBstring pixel# RGBstring
          2 index exch 2 index 3 mul exch
          putinterval
          pop % done with pixel#
        } for
        exch pop
      }
    } ifelse
  } if
} bind

.dicttomark readonly def
/pbmsetup {			% <file> <w> <h> <readproc> pbmsetup <imagedict>
   /readproc exch def
   /h exch def
   /w exch def
   /f exch def
   20 dict begin		% image dictionary
     /ImageType 1 def
     /Width w def
     /Height h def
     /ImageMatrix [w 0 0 h neg 0 h] def
     /BitsPerComponent bpc def
     /Decode [ 0 255 maxv div invert { exch } if ncomp 1 sub { 2 copy } repeat ] def
     /DataSource [ f rsize string /readproc load /exec load ] cvx def
   currentdict end
} def
/imagescale {			% <imagedict> imagescale -
  begin
    /SCALE where {
      pop
      /FITPAGE where {/FITPAGE get}{false} ifelse
      {
          Width SCALE mul Height SCALE mul
      }
      {
        % Map pixels SCALE-for-1.  Assume orthogonal transformation.
        Width 1 0 dtransform add abs div SCALE mul
        Height 0 1 dtransform add abs div SCALE mul
      } ifelse
    } {
      /FITPAGE where {/FITPAGE get}{false} ifelse
      {
          % Scale the image (uniformly) to fit the page.
        clippath pathbbox pop pop translate	% offset to the printable origin
        pathbbox 3 -1 roll sub exch 3 -1 roll sub exch
        % stack printable_width printable_height
        2 copy gt 3 1 roll .min exch
        % stack: min(printable_w, printable_h) landscape?
        {
          % printable height is less than width (landscape)
          dup Height Width gt {
            Width mul Height div exch
          } {
            Height mul Width div
          } ifelse
        } {
          % printable width is less than height (portrait)
          dup Height Width lt {
            Width mul Height div exch
          } {
            Height mul Width div
          } ifelse
        } ifelse
      }
      {
        0 0 translate
        612 792
      }
      ifelse
    }
    ifelse
    scale
  end
} def

% Image a PBM file page by page.
/viewpbm {			% <filename> viewpbm -
  20 dict begin
    (r) file /pf exch def {
      pf token not { exit } if
      pbmtypes exch get pf exch exec pbmsetup
      currentcolorspace			% preserve colorspace around setpagedevice
      /FITPAGE where
      {
        /FITPAGE get
        {
          /SCALE where
          {
            pop
            << /PageSize [ 1 1 dtransform h SCALE mul exch abs div exch w SCALE mul exch abs div exch ] >>
          }
          {
            << /PageSize [ 1 1 dtransform h exch abs div exch w exch abs div exch ] >>
          } ifelse
          setpagedevice
        } if
      } if
      setcolorspace			% restore colorspave in case we did setpagedevice
      dup imagescale image showpage
    } loop
  end
} def

% Reassemble a composite PBM file from the CMYK separations.
/viewpsm {
  20 dict begin
    /fname exch def
    /sources [ 0 1 3 {
      /plane exch def
      /pf fname (r) file def
      pf pbmtypes pf token pop get exec
                % Stack: pf w h readproc
      plane {
        /readproc exch def /h exch def /w exch def pop
        /row rsize string def
        h { pf row readproc pop } repeat
        pf pbmtypes pf token pop get exec
      } repeat
      pbmsetup
    } for ] def
    /datas [ sources { /DataSource get 0 get } forall ] def
    /decode sources 0 get /Decode get
      dup 0 get exch 1 get add cvi 0 exch
      2 copy 4 copy 8 array astore def
    sources 0 get
      dup /MultipleDataSources true put
      dup /DataSource datas put
      dup /Decode decode put
    /DeviceCMYK setcolorspace
    /FITPAGE where
    {
      /FITPAGE get
      {
        /SCALE where
        {
            <</PageSize [w SCALE mul h SCALE mul]>>
        }
        {
            <</PageSize [w h]>>
        }ifelse
        setpagedevice
      } if
    } if
    dup imagescale image showpage
  end
} def

% If the program was invoked from the command line, run it now.
[ .shellarguments
 { counttomark 1 ge
    { ] { viewpbm } forall
    }
    { cleartomark
      (Usage: gs [-dSCALE=#.#] [-dFITPAGE] [--] viewpbm.ps filename.p*m ...\n) print
      ( e.g.: gs [-dSCALE=#.#] [-dFITPAGE] [--] viewpbm.ps my.ppm another.ppm\n) print flush
      (    also -dTAG option can be used to show the pseudo-color tag image from a\n) print flush
      (    P7 RGB_TAG PAM file created by the bitrgbtags device.\n) print flush
    }
   ifelse
 }
 { pop
 }
ifelse
