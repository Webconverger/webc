#! /usr/bin/perl
# 
use strict;
use warnings;
use Debconf::Client::ConfModule qw(:all);
version('2.0');
my $capb=capb("backup");

$|=1;
# Predefined values:
my $version         = "3.10-0.bpo.3-686-pae";
my $kimage          = "vmlinuz";
my $prerm_hook      = '';       #Normally we do not
my $kernel_arch       = "x86";
my $package_name    = "linux-image-$version";

#known variables
my $realimageloc    = "/boot/";
my $CONF_LOC        = '/etc/kernel-img.conf';

# Variables used
my $image='';
my $ret=0;
my $seen='';
my $answer='';
my $running = '';
my $WouldInvalidate = 0;

# Ignore all invocations uxcept when called on to remove
exit 0 unless ($ARGV[0] && $ARGV[0] =~ /remove/) ;

if (-r "$CONF_LOC" && -f "$CONF_LOC"  ) {
  if (open(CONF, "$CONF_LOC")) {
    while (<CONF>) {
      chomp;
      s/\#.*$//g;
      next if /^\s*$/;

      $prerm_hook      = "$1"  if /prerm_hook\s*=\s*(\S+)/i;
    }
    close CONF;
  }
}


$ENV{KERNEL_ARCH}=$kernel_arch if $kernel_arch;

#check to see if we are trying to remove a running kernel
# if so we abort right now.
chop($running=`uname -r`);
if ($running eq $version) {
  my $question = "${package_name}/prerm/removing-running-kernel-$version";

  ($ret,$seen) = fset ("$question", 'seen', 'false');
  die "Error setting debconf flags in $question: $seen" if $ret;

  $ret = subst("$question", 'running', "$running");
  die "Error setting debconf substitutions in $question: $seen" if $ret;

  ($ret,$seen) = input('critical', "$question");
  if ($ret && $ret != 30 ) {
    die "Error setting debconf question $question: $seen";
  }

  ($ret,$seen) = go ();
  if ($ret && $ret != 30 ) {
    die "Error asking debconf question $question: $seen";
  }

  ($ret,$answer) = get("$question");
  die "Error retreiving answer for $question: $answer" if $ret;

  if ($answer =~ /^(y|t)/i) {
    print STDERR "Aborting removal of running kernel image.\n";
    exit 1; #Operation not permitted
  }
  else {
     print STDERR "Ok, proceeding with removing running kernel image.\n";
  }
}

#Now, they have an alternate kernel which they are currently running

chdir("/") or die "could not chdir to /:$!\n";


# set the env var stem
$ENV{'STEM'} = "linux";

sub exec_script {
  my $type   = shift;
  my $script = shift;
  print STDERR "Running $type hook script $script.\n";
  system ("$script $version $realimageloc$kimage-$version") &&
    print STDERR "User $type hook script [$script] ";
  if ($?) {
    if ($? == -1) {
      print STDERR "failed to execute: $!\n";
    }
    elsif ($? & 127) {
      printf STDERR "died with signal %d, %s coredump\n",
        ($? & 127),  ($? & 128) ? 'with' : 'without';
    }
    else {
      printf STDERR "exited with value %d\n", $? >> 8;
    }
    exit $? >> 8;
  }
}
sub run_hook {
  my $type   = shift;
  my $script = shift;
  if ($script =~ m,^/,) {
    # Full path provided for the hook script
    if (-x "$script") {
      &exec_script($type,$script);
    }
    else {
      die "The provided $type hook script [$script] could not be run.\n";
    }
  }
  else {
    # Look for it in a safe path
    for my $path ('/bin', '/sbin', '/usr/bin', '/usr/sbin') {
      if (-x "$path/$script") {
        &exec_script($type, "$path/$script");
        return 0;
      }
    }
    # No luck
    print STDERR "Could not find $type hook script [$script].\n";
    die "Looked in: '/bin', '/sbin', '/usr/bin', '/usr/sbin'\n";
  }
}


my $options;
for (@ARGV) {
	s,','\\'',g;
	$options .= " '$_'";
}
$ENV{'DEB_MAINT_PARAMS'}="$options";

## Run user hook script here, if any
if (-x "$prerm_hook") {
  &run_hook("prerm", $prerm_hook);
}
if (-d "/etc/kernel/prerm.d") {
  print STDERR "Examining /etc/kernel/prerm.d.\n";
  system ("run-parts --verbose --exit-on-error --arg=$version " . 
          "--arg=$realimageloc$kimage-$version /etc/kernel/prerm.d") &&
            die "Failed to process /etc/kernel/prerm.d";
}
if (-d "/etc/kernel/prerm.d/$version") {
  print STDERR "Examining /etc/kernel/prerm.d/$version.\n";
  system ("run-parts --verbose --exit-on-error --arg=$version" .
          " --arg=$realimageloc$kimage-$version " .
          "/etc/kernel/prerm.d/$version") &&
            die "Failed to process /etc/kernel/prerm.d/$version";
}

exit 0;
__END__
